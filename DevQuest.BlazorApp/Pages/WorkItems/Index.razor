@page "/workitems"
@using DevQuest.Application.WorkItems.GetAllWorkItems
@using DevQuest.BlazorApp.Services
@inject IWorkItemService WorkItemService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Gestion des WorkItems</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Gestion des WorkItems</h1>
    <a href="/workitems/create" class="btn btn-primary">
        <i class="fas fa-plus"></i> Nouveau WorkItem
    </a>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Chargement...</span>
        </div>
    </div>
}
else if (workItems?.Any() == true)
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Nom</th>
                    <th>Description</th>
                    <th>Date de création</th>
                    <th>Date planifiée</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var workItem in workItems)
                {
                    <tr>
                        <td>
                            <strong>@workItem.Name</strong>
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(workItem.Description))
                            {
                                <span>@(workItem.Description.Length > 50 ? workItem.Description.Substring(0, 50) + "..." : workItem.Description)</span>
                            }
                            else
                            {
                                <em class="text-muted">Aucune description</em>
                            }
                        </td>
                        <td>
                            <small class="text-muted">@workItem.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                        </td>
                        <td>
                            @if (workItem.ScheduledDate.HasValue)
                            {
                                <span class="badge bg-info">@workItem.ScheduledDate.Value.ToString("dd/MM/yyyy")</span>
                            }
                            else
                            {
                                <em class="text-muted">Non planifié</em>
                            }
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <a href="/workitems/@workItem.Id" class="btn btn-sm btn-outline-primary" title="Voir">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a href="/workitems/@workItem.Id/edit" class="btn btn-sm btn-outline-secondary" title="Modifier">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(workItem.Id, workItem.Name)" title="Supprimer">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-info" role="alert">
        <h4 class="alert-heading">Aucun WorkItem trouvé</h4>
        <p>Il n'y a actuellement aucun WorkItem. Commencez par en créer un nouveau.</p>
        <hr>
        <a href="/workitems/create" class="btn btn-primary">Créer mon premier WorkItem</a>
    </div>
}

@code {
    private IEnumerable<WorkItemSummary>? workItems;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkItems();
    }

    private async Task LoadWorkItems()
    {
        try
        {
            isLoading = true;
            var response = await WorkItemService.GetAllAsync();
            workItems = response.WorkItems;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur lors du chargement des WorkItems: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ConfirmDelete(Guid id, string name)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Êtes-vous sûr de vouloir supprimer '{name}' ?");
        if (confirmed)
        {
            await DeleteWorkItem(id);
        }
    }

    private async Task DeleteWorkItem(Guid id)
    {
        try
        {
            await WorkItemService.DeleteAsync(id);
            await LoadWorkItems(); // Recharger la liste
            await JSRuntime.InvokeVoidAsync("alert", "WorkItem supprimé avec succès!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur lors de la suppression: {ex.Message}");
        }
    }
}